plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    // JUnit 5 for testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

    // Spark Java for serving static files
    implementation 'com.sparkjava:spark-core:2.9.4'

    // SLF4J Simple for logging
    implementation 'org.slf4j:slf4j-simple:2.0.9'

    // Gson for JSON conversion
    implementation 'com.google.code.gson:gson:2.10'
}

application {
    // Default program to run (WebApp serves the front-end)
    mainClass = 'org.example.WebApp'
}

tasks.register('runWelcomeWithThreeMessages', JavaExec) {
    group = 'application'
    description = 'Run WelcomeWithThreeMessages program'
    main = 'org.example.Chapter01.WelcomeWithThreeMessages'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runComputeExpression', JavaExec) {
    group = 'application'
    description = 'Run ComputeExpression program'
    main = 'org.example.Chapter01.ComputeExpression'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runComputeArea', JavaExec) {
    group = 'application'
    description = 'Run ComputeArea program'
    main = 'org.example.Chapter02.ComputeArea'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExercise_01_01', JavaExec) {
    group = 'application'
    description = 'Run Exercise_01_01 program for Chapter01'
    main = 'org.example.Chapter01.exercises.Exercise_01_01'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runWebApp', JavaExec) {
    group = 'application'
    description = 'Run WebApp to serve the front-end'
    main = 'org.example.WebApp'
    classpath = sourceSets.main.runtimeClasspath
}

test {
    useJUnitPlatform()
}
